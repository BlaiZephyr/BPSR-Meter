REPARACIONES Y CAMBIOS REALIZADOS PARA EMPAQUETADO EXITOSO (2025)

1. Actualización de dependencias:
   - Electron actualizado a la última versión (38.0.0) para máxima compatibilidad con Node.js y módulos nativos.
   - google-protobuf actualizado a la versión 4.0.0.
   - Verificadas y actualizadas otras dependencias principales y de desarrollo.

2. Corrección de rutas y empaquetado:
   - Corregida la ruta de iconos en el HTML para evitar rutas absolutas.
   - Ajustada la función de log para escribir en la carpeta de usuario (APPDATA/bpsr-meter), compatible con entorno empaquetado.
   - Corregida la forma de lanzar server.js usando fork y app.getAppPath() para que funcione dentro de app.asar.
   - Eliminadas variables duplicadas en electron-main.js para evitar errores de compilación.
   - Revisadas rutas y dependencias en preload.js, server.js y archivos protobuf.

3. Manejo de errores y logs:
   - Implementado log de arranque y errores en iniciar_log.txt.
   - Mensaje visual en la ventana si el servidor no responde.
   - Validación de errores tras cada actualización de dependencias.

4. Desinstalador avanzado:
   - Script NSIS personalizado para eliminar la carpeta de datos de usuario en Roaming al desinstalar.
   - Corregido extra.nsh para evitar errores de compilación.

5. Compatibilidad y advertencias:
   - Se detectó y documentó la advertencia sobre espacios en la ruta del proyecto al compilar módulos nativos (como cap).
   - El build fue exitoso, pero se recomienda evitar espacios en la ruta del proyecto para máxima compatibilidad con node-gyp y módulos nativos.


¿CÓMO EVITAR LA ADVERTENCIA DE "space in the path" AL EMPAQUETAR?

- Mueve tu proyecto a una ruta sin espacios, por ejemplo:
  De: F:\DPS-METER-by-MrSnake\BPSR Meter overlay
  A:   F:\DPS-METER-by-MrSnake\BPSR-Meter-Overlay

- Renombra la carpeta si es necesario y actualiza cualquier acceso directo o script que apunte a la ruta anterior.
- Vuelve a ejecutar `pnpm install` y luego `pnpm run dist`.

Esto eliminará la advertencia y reducirá el riesgo de problemas con módulos nativos en el futuro.

Si necesitas más detalles de algún cambio, consulta este archivo o pide ayuda aquí.

---

6. Correcciones de rutas de módulos y configuración global (2025-09-13):
   - Problema: La aplicación fallaba al empaquetarse con el error "Cannot find module" y "TypeError: Cannot read properties of undefined (reading 'enableHistorySave')".
   - Causa 1: Las rutas relativas a los módulos en `server.js` no se resolvían correctamente dentro del archivo `app.asar` de Electron.
   - Causa 2: La carpeta `src` no estaba incluida en la configuración de empaquetado de Electron (`build.files` en `package.json`), lo que impedía que los módulos se incluyeran en el paquete final.
   - Causa 3: La clase `UserDataManager` en `src/server/dataManager.js` no recibía el objeto `globalSettings` en su constructor, lo que causaba un `TypeError` al intentar acceder a sus propiedades.

   - Solución 1 (server.js): Se modificaron todas las llamadas `require()` en `server.js` para usar `path.join(__dirname, ...)` y construir rutas absolutas a los módulos (`dataManager`, `sniffer`, `api`, `packet`) y al archivo `settings.json`.
   - Solución 2 (package.json): Se añadió `src/**/*` a la sección `build.files` en `package.json` para asegurar que todos los archivos de la carpeta `src` se incluyan en el paquete final de Electron.
   - Solución 3 (src/server/dataManager.js y server.js):
     - En `src/server/dataManager.js`:
       - El constructor de `UserDataManager` fue modificado para aceptar `globalSettings` como un parámetro y almacenarlo en `this.globalSettings`.
       - Las rutas `cacheFilePath` y `playerMapPath` se ajustaron para usar `path.join(__dirname, '..', '..', 'users.json')` y `path.join(__dirname, '..', '..', 'player_map.json')` para ser absolutas.
       - Todas las llamadas internas a métodos como `saveAllUserData`, `addLog`, `clearAll` y `checkTimeoutClear` dentro de `UserDataManager` se actualizaron para usar `this.globalSettings` en lugar de esperar `globalSettings` como un argumento.
     - En `server.js`:
       - La instanciación de `UserDataManager` se actualizó para pasar el objeto `globalSettings` global al constructor: `new UserDataManager(logger, globalSettings)`.

   - Resultado: La aplicación ahora debería empaquetarse y ejecutarse correctamente, resolviendo los errores de `MODULE_NOT_FOUND` y `TypeError`.
